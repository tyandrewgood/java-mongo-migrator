from typing import List, Dict, Any
from llm.llm_client import LLMClient
from llm.prompt_templates import VALIDATION_PROMPT_TEMPLATE


class MigrationPlanValidator:
    """
    Validates the completeness and accuracy of a migration plan generated by the LLM.
    """

    def __init__(self, llm_client: LLMClient):
        self.llm_client = llm_client

    def _clean_response(self, response: str) -> str:
        """
        Removes triple backticks and optional language tags from the LLM response
        so it can be parsed as JSON.
        """
        if response.startswith("```") and response.endswith("```"):
            lines = response.splitlines()
            # Remove the first line if it starts with ```
            if lines and lines[0].startswith("```"):
                lines = lines[1:]
            # Remove the last line if it starts with ```
            if lines and lines[-1].startswith("```"):
                lines = lines[:-1]
            response = "\n".join(lines)
        return response.strip()

    def validate_plan(self, migration_plan: str, parsed_classes: List[Dict[str, Any]]) -> Dict[str, Any]:
        if not migration_plan:
            raise ValueError("Migration plan is empty.")

        if not parsed_classes:
            raise ValueError("No parsed Java classes provided for validation.")

        parsed_info_lines = []
        for cls in parsed_classes:
            name = cls.get("name", "UnknownClass")
            fields = cls.get("fields", [])
            if fields:
                fields_str = ", ".join(f"{f['name']}:{f.get('type', 'unknown')}" for f in fields)
            else:
                fields_str = "No fields"
            parsed_info_lines.append(f"Class: {name}, Fields: {fields_str}")
        parsed_info_str = "\n".join(parsed_info_lines)

        prompt = VALIDATION_PROMPT_TEMPLATE.format(
            migration_plan=migration_plan,
            parsed_info=parsed_info_str
        )

        validation_response = self.llm_client.generate(prompt)

        cleaned_response = self._clean_response(validation_response)

        try:
            import json
            validation_report = json.loads(cleaned_response)
        except Exception:
            validation_report = {
                "valid": False,
                "issues": ["Failed to parse validation response."],
                "raw_response": validation_response
            }

        return validation_report
